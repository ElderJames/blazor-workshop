@page "/checkout"
@attribute [Authorize]
@inject OrderState OrderState
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<Form Model="OrderState.Order.DeliveryAddress" OnFinish="PlaceOrder" LabelColSpan="6" WrapperColSpan="18">
    <Row Gutter="16" Style="padding: 15px;">
        <AntDesign.Col Span="12">
            <Card Title="Review order" Style="width:100%;height:100%;">
                <OrderReview Order="OrderState.Order" />
            </Card>
        </AntDesign.Col>
        <AntDesign.Col Span="12">
            <Card Title="Deliver to..." Style="width: 100%;height: 100%;">
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </Card>
        </AntDesign.Col>
    </Row>
    <div style="text-align:center;">
        <Button HtmlType="submit" Disabled="@isSubmitting" Type="@ButtonType.Primary" Size="@ButtonSize.Large">Place order</Button>
    </div>
</Form>


@code {
    bool isSubmitting;

    protected override void OnInitialized()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }

    async Task PlaceOrder()
    {
        isSubmitting = true;

        try
        {
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
}
